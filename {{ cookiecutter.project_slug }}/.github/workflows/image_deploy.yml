
name: update-image
on: [ push ]
env:
  IMAGE_NAME: {{ cookiecutter.project_slug | lower }}
{% raw %}
jobs:
  test:
    runs-on: ubuntu-latest
    environment: gh-action-env
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    # - name: Run tests
    #   env:
    #     GIT_TOKEN: ${{ secrets.GIT_TOKEN }}
    #   run: make test

    # - name: Code Coverage Report
    #   uses: irongut/CodeCoverageSummary@v1.3.0
    #   with:
    #     filename: ./**/coverage.xml
    #     badge: true
    #     fail_below_min: false
    #     format: markdown
    #     hide_branch_rate: false
    #     hide_complexity: true
    #     indicators: true
    #     output: both
    #     thresholds: '60 80'

    # - uses: jwalton/gh-find-current-pr@v1
    #   id: finder
    # - name: Add Coverage PR Comment
    #   uses: marocchino/sticky-pull-request-comment@v2
    #   with:
    #     number: ${{ steps.finder.outputs.pr }}
    #     recreate: true
    #     path: code-coverage-results.md

    # - name: Login to GitHub Container Registry
    #   uses: docker/login-action@v3
    #   with:
    #     registry: ghcr.io
    #     username: ${{ github.actor }}
    #     password: ${{ secrets.GITHUB_TOKEN }}

    # - name: Build image
    #   run: docker build --build-arg GIT_TOKEN=${{ secrets.GIT_TOKEN }} . --file Dockerfile.prod --tag $IMAGE_NAME --label "runnumber=${GITHUB_RUN_ID}"
    # - name: Log in to registry
    #   run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $ --password-stdin
    # - name: Push image
    #   run: |
    #     # define the different names and normalize them
    #     IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME
    #     IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
    #     VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

    #     # according the ref change the version to latest (if push on main)
    #     # or the tag name (if a tag is pushed)
    #     echo REF=${{ github.ref }}
    #     echo NEW_VERSION=$VERSION
    #     [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
    #     [ "$VERSION" == "main" ] && VERSION=latest
    #     echo IMAGE_ID=$IMAGE_ID
    #     echo VERSION=$VERSION

    #     # push the image
    #     docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
    #     docker push $IMAGE_ID:$VERSION
{% endraw %}
